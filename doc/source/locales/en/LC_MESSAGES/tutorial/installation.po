# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, jkjkil4
# This file is distributed under the same license as the JAnim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: JAnim\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-17 23:55+0800\n"
"PO-Revision-Date: 2025-05-17 23:58+0800\n"
"Last-Translator: \n"
"Language-Team: en <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"
"X-Generator: Poedit 3.6\n"

#: ../../source/tutorial/installation.rst:2
msgid "安装"
msgstr "Installation"

#: ../../source/tutorial/installation.rst:6
msgid ""
"JAnim 是一个动画库，运行在 Python 3.12 及更高版本上。用 JAnim 制作动画的过程需"
"要编写 Python 程序，因此要求使用者对编程有一定的了解"
msgstr ""
"JAnim is an animation library that runs on Python 3.12 and above. Creating "
"animations with JAnim requires writing Python code, so users are expected to "
"have some programming knowledge."

#: ../../source/tutorial/installation.rst:9
msgid "步骤"
msgstr "Steps"

#: ../../source/tutorial/installation.rst:14
msgid "安装依赖项"
msgstr "Install Dependencies"

#: ../../source/tutorial/installation.rst:16
msgid "以下依赖需要全局安装在系统中："
msgstr "The following dependencies must be installed system-wide:"

#: ../../source/tutorial/installation.rst:18
msgid ""
"`FFmpeg <https://ffmpeg.org>`_ （用于输出视频文件，在 Windows 下安装需要配置 "
"**环境变量**）"
msgstr ""
"`FFmpeg <https://ffmpeg.org>`_ (Used to output video files; Windows "
"installation requires configuring **environment variables**)"

#: ../../source/tutorial/installation.rst:19
msgid ""
"`Typst <https://github.com/typst/typst/releases>`_ （可选，用于公式排版，需要"
"配置 **环境变量**）"
msgstr ""
"`Typst <https://github.com/typst/typst/releases>`_ (Optional but necessary "
"for formula typesetting, requires configuring **environment variables**)"

#: ../../source/tutorial/installation.rst:23
msgid "Windows + 使用包管理器（推荐）"
msgstr "Windows + Package Manager (Recommended)"

#: ../../source/tutorial/installation.rst:25
msgid ""
"Windows 系统的包管理不一定是开箱即用的，通常需要略微熟悉命令行操作并且需要少量"
"配置。这个配置过程相对来说比较费时，但是一旦配置好就能自动处理很多琐事。笔者此"
"处推荐使用包管理器。"
msgstr ""
"Package managers on Windows may not work out-of-the-box and usually require "
"some familiarity with command-line operations and minor setup. While the "
"setup may take some time, once configured, they handle many tasks "
"automatically. We recommends using a package manager."

#: ../../source/tutorial/installation.rst:27
msgid ""
"包管理器有很多选择，一般来说 Windows 应该自带一个 Winget，也可以使用 "
"`Chocolatey <https://community.chocolatey.org/>`_ 或者 `Scoop <https://"
"scoop.sh/>`_。三者只需安装一种，不过多装的话也没什么冲突。"
msgstr ""
"There are several options, such as Winget (built-in), `Chocolatey <https://"
"community.chocolatey.org/>`_, or `Scoop <https://scoop.sh/>`_. Only one is "
"needed, but having more won’t cause conflicts."

#: ../../source/tutorial/installation.rst:29
msgid ""
"安装完包管理器（或者自带 Winget），以 Winget 为例，按 ``Win + R`` 输入 "
"``powershell`` 或者在开始菜单中输入 powershell 打开 Powershell，输入 ``winget "
"install typst`` 以及 ``winget install ffmpeg`` 即可完成安装。其他两种也是同"
"理。"
msgstr ""
"After installing the package manager (or using the built-in Winget), take "
"Winget as an example. Press ``Win + R``, type ``powershell``, or search for "
"Powershell in the Start menu to open Powershell. Then, enter ``winget install "
"typst`` and ``winget install ffmpeg`` to complete the installation. The same "
"applies to the other two methods."

#: ../../source/tutorial/installation.rst:33
msgid ""
"如果不熟悉命令行，希望使用图形化界面，也可以安装 `UniGetUI <https://"
"github.com/marticliment/UniGetUI>`_ 来对包管理器进行统一展示和调用，注意它只是"
"包管理器的图形界面，仍然需要环境中存在对应包管理器才能使用"
msgstr ""
"If you're not familiar with the command line and prefer to use a graphical "
"interface, you can also install `UniGetUI <https://github.com/marticliment/"
"UniGetUI>`_ to provide a unified display and access to the package manager. "
"Note that it is just a graphical interface for the package manager, and the "
"corresponding package manager must still be present in the environment for it "
"to work."

#: ../../source/tutorial/installation.rst:35
msgid "Windows + 直接下载二进制"
msgstr "Windows + Direct Binary Download"

#: ../../source/tutorial/installation.rst:37
msgid ""
"直接下载二进制文件，需要的环节更少，但是需要手动处理安装位置、添加环境变量、更"
"新二进制的问题。"
msgstr ""
"This method requires fewer steps but involves manual management of "
"installation paths, environment variables, and binary updates."

#: ../../source/tutorial/installation.rst:39
msgid ""
"首先安装 FFmpeg。点击 https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z 下"
"载压缩包，解压，将 ``ffmpeg-`` 开头的文件夹移到适当的位置（例如 ``C:\\"
"\\Program Files``），把该文件夹改名为 ``ffmpeg``。"
msgstr ""
"First, install FFmpeg. Download the archive from https://www.gyan.dev/ffmpeg/"
"builds/ffmpeg-git-full.7z, extract it, move the folder (starting with "
"``ffmpeg-``) to a suitable location (e.g., ``C:\\\\Program Files``), and "
"rename it to ``ffmpeg``."

#: ../../source/tutorial/installation.rst:41
msgid ""
"然后安装 Typst。点击 https://github.com/typst/typst/releases/latest/download/"
"typst-x86_64-pc-windows-msvc.zip 下载压缩包（如果网络错误可以反复尝试几次），"
"解压，将 ``typst-x86_64-pc-windows-msvc`` 移到适当的位置，把该文件夹改名为 "
"``typst``。"
msgstr ""
"Then, install Typst. Download from https://github.com/typst/typst/releases/"
"latest/download/typst-x86_64-pc-windows-msvc.zip, extract it, move the folder "
"to a suitable location, and rename it to ``typst``."

#: ../../source/tutorial/installation.rst:43
msgid ""
"最后添加环境变量。如果使用的是 Windows 11，可以按“Windows 徽标”键或者点击“开"
"始”按钮，输入“环境变量”。（如果使用之前的版本可以右键此电脑 - 属性 - 高级系统"
"设置）。点击“环境变量”，双击“用户变量”（或“系统变量”，任选其一）的“Path”，右键"
"刚刚的 ``typst`` 文件夹并“复制文件地址”，在 Path 窗口（如下图）点击“新建”并把"
"文件地址粘贴进去（注意不要带引号）。类似操作，将 ``ffmpeg\\bin`` 也就是刚刚得"
"到的 ffmpeg 下的 bin 文件夹的文件地址粘贴进去。"
msgstr ""
"Finally, add them to environment variables. On Windows 11, press the “Windows "
"logo” key or click “Start”, search for “Environment Variables”. (On older "
"versions, right-click “This PC” → Properties → Advanced system settings.) "
"Click “Environment Variables”, double-click “Path” under “User variables” (or "
"“System variables”), then right-click the ``typst`` folder and “Copy as "
"path”. In the “Path” window, click “New” and paste the path (without quotes). "
"Similarly, add the path to ``ffmpeg\\bin``."

#: ../../source/tutorial/installation.rst:49
msgid ""
"尝试一下有没有正确识别。在“开始”菜单输入并打开 PowerShell 或者 Cmd，运行 "
"``ffmpeg --version`` 和 ``typst --version``，输出版本号则安装成功。"
msgstr ""
"Test if it's recognized: open PowerShell or Cmd from the Start Menu and run "
"``ffmpeg --version`` and ``typst --version``. If the version is displayed, "
"installation succeeded."

#: ../../source/tutorial/installation.rst:51
msgid "macOS"
msgstr "macOS"

#: ../../source/tutorial/installation.rst:53
msgid ""
"推荐使用包管理器安装，这里使用常见的 `Homebrew <https://brew.sh/>`_ 作为示例。"
msgstr ""
"It's recommended to install using a package manager. Here, `Homebrew <https://"
"brew.sh/>`_ is used as an example."

#: ../../source/tutorial/installation.rst:55
msgid ""
"Homebrew 是 macOS 上最常用的包管理器，使用下面这个命令即可安装（如果你已经安装"
"过了，可以跳过）："
msgstr ""
"Homebrew is a widely used package manager on macOS, you can install it using "
"the following command (skip this step if it's already installed):"

#: ../../source/tutorial/installation.rst:61
msgid "接着便可以使用 Homebrew 安装 FFmpeg 和 Typst"
msgstr "Then install FFmpeg and Typst using Homebrew:"

#: ../../source/tutorial/installation.rst:73
msgid "另外，在 macOS 上使用 JAnim 窗口还需要安装 portaudio"
msgstr "Additionally, you need to install PortAudio for the JAnim GUI"

#: ../../source/tutorial/installation.rst:80
msgid ""
"使用 ``brew --prefix portaudio`` 命令查看 portaudio 的安装路径，记下这个路径，"
"后面会用到。（例：在笔者设备上查看的结果是 ``/opt/homebrew/opt/portaudio``）"
msgstr ""
"Use ``brew --prefix portaudio`` to find its install path, it will be needed "
"later. (e.g., ``/opt/homebrew/opt/portaudio`` in my device)"

#: ../../source/tutorial/installation.rst:82
msgid ""
"在用户主目录（``/Users/你的用户名/`` 或者等价的 ``~``）下创"
"建 .pydistutils.cfg 配置文件，根据我们刚刚记下的路径，添加 include 路径和 lib "
"路径并保存，例如在笔者设备上创建的文件内容如下图红框所示："
msgstr ""
"Next, create a .pydistutils.cfg configuration file in the user's home "
"directory (``/Users/your_username/`` or equivalently ``~``). Based on the "
"path we just noted, add the `include` and `lib` paths and save the file. For "
"example, on my device, the file content is shown in the red box in the image "
"below:"

#: ../../source/tutorial/installation.rst:87
msgid ""
"接下来便可以按照后面的教程安装 JAnim 了，如果在安装 JAnim 时遇到 portaudio 的"
"问题，可以再来检查一下上述路径是否配置正确"
msgstr ""
"Now you can proceed with installing JAnim as per the following tutorial. If "
"you encounter any portaudio-related issues during the installation of JAnim, "
"you can check if the path is configured correctly."

#: ../../source/tutorial/installation.rst:89
msgid "Linux"
msgstr "Linux"

#: ../../source/tutorial/installation.rst:91
#, python-format
msgid ""
"考虑到使用 `类 UNIX <https://zh.wikipedia.org/wiki/"
"%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F>`_ 的用户一般对命令行更有了解，而且相应的发行"
"版多，包管理没有通用的命令。这里仅给出 Ubuntu 的安装方法。"
msgstr ""
"Given that users of UNIX-like systems are generally more familiar with "
"command-line operations, and since there are multiple distributions, there is "
"no universal command for package management. Here, only the installation "
"method for Ubuntu is provided."

#: ../../source/tutorial/installation.rst:93
msgid ""
"打开终端，运行以下命令。FFmpeg 使用包管理器安装，不同发行版包管理器不同，请自"
"行适配。"
msgstr ""
"Open a terminal and run the following commands. FFmpeg can be installed using "
"a package manager, but depending on your distribution, the package manager "
"might differ. Please adapt accordingly."

#: ../../source/tutorial/installation.rst:102
msgid "Typst 由于相对较新且未进入稳定版，直接从源代码仓库下载安装。"
msgstr ""
"For Typst, as it is relatively new and hasn't yet reached the stable release, "
"install it directly from the source repository."

#: ../../source/tutorial/installation.rst:112
msgid ""
"笔者仅在一台虚拟机上尝试过以上安装，不保证真实环境也能做到。网络波动、本地命令"
"不存在、文件重名等等原因都可能导致安装失败。有安装问题请在 GitHub 或群聊中及时"
"提出并附带错误信息和/或截图。"
msgstr ""
"I have only tested this installation on a virtual machine, and it may not "
"work in a real environment. Network fluctuations, missing local commands, "
"file name conflicts, and other factors could lead to installation failure. If "
"you encounter issues, please report them on GitHub or in the chat group, "
"providing error messages and/or screenshots."

#: ../../source/tutorial/installation.rst:115
msgid "安装 JAnim"
msgstr "Install JAnim"

#: ../../source/tutorial/installation.rst:117
msgid ""
"JAnim 是一个库并且提供了可以直接调用的二进制，熟悉 Python 库的开发者可以自行选"
"用合适的方法安装。整体上来说有两种安装思路，各有优势。安装在全局的好处是所有项"
"目都可以调用同一套库，可以直接调用命令而不需要先切换环境和目录；安装在虚拟环境"
"的好处是做到项目间的依赖隔离，并且不会污染全局的指令。"
msgstr ""
"JAnim is a library and also provides a binary that can be directly invoked. "
"Developers familiar with Python library development can choose the "
"appropriate method for installation. There are two main approaches, each with "
"its own advantages. Installing globally allows all projects to call the same "
"set of libraries, and you can invoke commands directly without switching "
"environments and directories. Installing in a virtual environment helps "
"isolate dependencies between projects and avoids polluting global commands."

#: ../../source/tutorial/installation.rst:119
msgid ""
"以下简单介绍几种常见的安装方法。由于在此之后的操作或多或少要涉及到命令行操作，"
"所以简单介绍一下打开命令行的方式，以后不再指出。在 Windows 上推荐使用自带的 "
"Powershell，❶简单的打开方式是 “Win 徽标键 + R” 打开 “运行” 窗口，输入 "
"``powershell`` （Powershell 7.x 需要输入 ``pwsh``），❷也可以如上所说在开始菜单"
"中输入“powershell”然后回车，或者❸在 VS Code 中按下 ``ctrl + ```。在 macOS / "
"Linux 上一般是右键选择“终端”或者找到自带的终端图标。"
msgstr ""
"Here are a few common installation methods. Since most of the subsequent "
"operations will involve command-line usage, I'll briefly explain how to open "
"the command line. On Windows, it's recommended to use the built-in "
"PowerShell. ❶ A simple way to open it is by pressing \"Win + R\" and typing "
"``powershell`` (for PowerShell 7.x, type ``pwsh``), ❷ you can also type "
"\"powershell\" in the Start menu and press Enter, or ❸ press ``ctrl + ``` in "
"VS Code. On macOS/Linux, you generally right-click and select \"Terminal\" or "
"find the terminal icon in the system."

#: ../../source/tutorial/installation.rst:123
msgid "uv + 虚拟环境"
msgstr "uv + Virtual Environment"

#: ../../source/tutorial/installation.rst:125
#: ../../source/tutorial/installation.rst:151
msgid ""
"`uv <https://github.com/astral-sh/uv>`_ 是一套用于 Python 项目管理的工具链，目"
"前已经相对完善，对于需要频繁使用 Python 多版本和多依赖库的开发者来说很方便。官"
"方提供了很多安装方法，可以用上文提到的包管理工具安装，也可以独立安装。"
msgstr ""
"`uv <https://github.com/astral-sh/uv>`_ is a toolchain for Python project "
"management, which is relatively complete and convenient for developers who "
"need to frequently use multiple Python versions and dependencies. The "
"official site provides many installation methods, including those mentioned "
"earlier, or you can install it independently."

#: ../../source/tutorial/installation.rst:129
#: ../../source/tutorial/installation.rst:155
msgid ""
"这一条目借鉴了 `ManimCE 项目的安装文档 <https://docs.manim.community/en/"
"stable/installation/uv.html>`_，命令行安装 ``uv`` 以及进一步新建项目的命令都可"
"以参考其中相应段落"
msgstr ""
"This section is inspired by `the installation documentation of the ManimCE "
"project <https://docs.manim.community/en/stable/installation/uv.html>`_. You "
"can refer to the relevant sections for command-line installation of ``uv`` "
"and for creating a new project."

#: ../../source/tutorial/installation.rst:131
#: ../../source/tutorial/installation.rst:157
msgid ""
"如果你对使用 ``uv`` 还不熟悉并略有困惑，可以点击上面分页中的 “Python + 全局” "
"切换到更为经典的安装方式，这样你可能会更容易理解，但我们仍然推荐使用 ``uv`` 进"
"行管理"
msgstr ""
"If you're not familiar with ``uv`` and find it a bit confusing, you can "
"switch to the \"Python + Global\" tab above for a more traditional "
"installation method. This might be easier to understand, but we still "
"recommend using ``uv`` for management."

#: ../../source/tutorial/installation.rst:133
msgid ""
"本节介绍每个文件夹下创建独立虚拟环境的方式。假如你在一个适当的文件路径（以下"
"用 “/my/path” 指代）下，想在一个叫 “JAnim-folder” 的文件夹下集中开发，那么请逐"
"行运行以下命令，它会自动创建 “JAnim-folder” 并在其中创建虚拟环境。"
msgstr ""
"This section explains how to create an independent virtual environment in "
"each folder. If you want to develop centrally in a folder called \"JAnim-"
"folder\" at an appropriate path (referred to as \"/my/path\"), run the "
"following commands one by one. It will automatically create the \"JAnim-"
"folder\" and set up the virtual environment inside it."

#: ../../source/tutorial/installation.rst:143
msgid ""
"用这种方式安装后，文档中所有 ``janim`` 指令都要换成 ``uv run janim``，如果仍然"
"要直接调用 ``janim``，则需要先 `激活虚拟环境 <https://docs.astral.sh/uv/pip/"
"environments/#using-a-virtual-environment>`_，这是出于全局和本项目隔离的目的。"
msgstr ""
"After installation, all ``janim`` commands in the documentation should be "
"replaced with ``uv run janim``. If you still want to call ``janim`` directly, "
"you need to `activate the virtual environment <https://docs.astral.sh/uv/pip/"
"environments/#using-a-virtual-environment>`_ to keep global and project "
"isolation."

#: ../../source/tutorial/installation.rst:147
msgid ""
"一切就绪后，可以使用 ``uv run janim examples`` 查看内置示例，进一步检验 JAnim "
"以及依赖项的安装情况"
msgstr ""
"Once everything is set up, you can use ``uv run janim examples`` to view the "
"built-in examples and further verify the installation of JAnim and its "
"dependencies."

#: ../../source/tutorial/installation.rst:149
msgid "uv + 全局"
msgstr "uv + Global"

#: ../../source/tutorial/installation.rst:159
msgid "和在虚拟环境中安装不同的是，全局安装不需要指定用来开发项目的文件夹。"
msgstr ""
"Unlike installing in a virtual environment, global installation does not "
"require specifying a project development folder."

#: ../../source/tutorial/installation.rst:168
#: ../../source/tutorial/installation.rst:183
msgid ""
"一切就绪后，可以使用 ``janim examples`` 查看内置示例，进一步检验 JAnim 以及依"
"赖项的安装情况"
msgstr ""
"Once everything is set up, you can use ``janim examples`` to view the built-"
"in examples and further verify the installation of JAnim and its dependencies."

#: ../../source/tutorial/installation.rst:170
msgid "Python + 全局"
msgstr "Python + Global"

#: ../../source/tutorial/installation.rst:172
msgid ""
"Python 可以直接安装，而且多版本可以共存。访问 `Python 官网下载页 <https://"
"www.python.org/downloads/>`_ 选择 3.12 或更高版本，下载安装。"
msgstr ""
"Python can be installed directly and supports multiple versions coexisting. "
"Visit the official Python download page `<https://www.python.org/downloads/"
">`_ and download version 3.12 or later."

#: ../../source/tutorial/installation.rst:174
msgid ""
"使用 Python 自带的 pip 工具，会自动将依赖安装在全局。打开命令行输入该命令即"
"可："
msgstr ""
"Using Python’s built-in pip tool will install dependencies globally. Just "
"enter the following command in your terminal:"

#: ../../source/tutorial/installation.rst:185
msgid "Conda + 全局（TODO）"
msgstr "Conda + Global (TODO)"

#: ../../source/tutorial/installation.rst:187
msgid "有待完善，欢迎补充"
msgstr "To be completed. Contributions are welcome!"

#: ../../source/tutorial/installation.rst:192
msgid "安装 VS Code"
msgstr "Install vscode"

#: ../../source/tutorial/installation.rst:194
msgid ""
"推荐使用 `VS Code <https://code.visualstudio.com/>`_ 进行开发，这样可以通过其"
"中的 ``janim-toolbox`` 插件让 JAnim 的使用更加方便"
msgstr ""
"We recommend using `VS Code <https://code.visualstudio.com/>`_ for "
"development, as the ``janim-toolbox`` extension can make working with JAnim "
"more convenient."

#: ../../source/tutorial/installation.rst:196
msgid "具体可以参考 :ref:`VS Code 插件 <vscode_extension>` 中的介绍"
msgstr ""
"For more details, refer to the section :ref:`VS Code Extension "
"<vscode_extension>`."

#: ../../source/tutorial/installation.rst:200
msgid "请点击页面的右下角的按钮进入下一节，在之后的小节中不再赘述"
msgstr ""
"Please click the button at the bottom right of the page to proceed to the "
"next section. The subsequent sections will not repeat this information."

#~ msgid "并且需要 OpenGL 4.3 及更高版本"
#~ msgstr "Requires OpenGL 4.3 and higher"

#~ msgid "JAnim 运行在 Python 3.12 及更高版本"
#~ msgstr "JAnim runs on Python 3.12 and higher"

#~ msgid "所需的依赖有："
#~ msgstr "Required dependencies:"

#~ msgid "使用 Python 环境安装 JAnim"
#~ msgstr "Install JAnim Using Python"
